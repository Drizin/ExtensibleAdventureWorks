using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExtensibleAdventureWorks.Business.Entities
{
    /// <summary>
    /// EntityTypeConfiguration<typeparamref name="T"/> Extensions to map NEW fields to Entity T
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public interface IModelExtension<T> where T : class
    {
        void Extend(EntityTypeConfiguration<T> config);
    }

    /// <summary>
    /// DbModelBuilder Extensions to map NEW entities
    /// </summary>
    public interface IModelExtension
    {
        void Extend(DbModelBuilder modelBuilder);
    }

    public static class ModelExtensions
    {

        static List<Type> _allAssemblyTypes;

        /// <summary>
        /// Loads all IModelExtension<T> (from current assembly) that extend this entity T
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="config"></param>
        public static void ConfigureExtensions<T>(this EntityTypeConfiguration<T> config) where T : class
        {
            var baseTypes = config.GetType().GetInterfaces().ToList();
            baseTypes.Add(config.GetType().BaseType);
            var t1 = baseTypes.Single(type =>
                    (type.IsGenericType && typeof(EntityTypeConfiguration<>).IsAssignableFrom(type.GetGenericTypeDefinition())));
            var entityType = t1.GetGenericArguments()[0];

            if (_allAssemblyTypes==null)
            {
                _allAssemblyTypes = typeof(IModelExtension).Assembly.GetTypes().ToList();
            }
            var typeExtensions = _allAssemblyTypes.Where(type =>
                type.GetInterfaces().Any(interf => (interf.IsGenericType && typeof(IModelExtension<>).IsAssignableFrom(interf.GetGenericTypeDefinition()) && interf.GetGenericArguments()[0] == entityType))
            );

            foreach (var typeExtension in typeExtensions)
            {
                IModelExtension<T> extensor = (IModelExtension<T>)System.Activator.CreateInstance(typeExtension);
                extensor.Extend(config);
            }

        }


        /// <summary>
        /// Loads extensions to the EF Model which weren't automatically generated by the T4 templates.
        /// This can be used (for example) for adding Derived Classes (class inheritance) to the model.
        /// </summary>
        public static void LoadEntityFrameworkExtensions(this System.Data.Entity.DbModelBuilder modelBuilder)
        {
            var extensions = typeof(IModelExtension).Assembly.GetTypes().Where(type => !type.IsInterface && typeof(IModelExtension).IsAssignableFrom(type));

            foreach (var extension in extensions)
            {
                IModelExtension extensor = (IModelExtension)System.Activator.CreateInstance(extension);
                extensor.Extend(modelBuilder);
            }
        }

    }

}
