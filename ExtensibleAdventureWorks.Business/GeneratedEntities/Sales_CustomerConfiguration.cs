// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace ExtensibleAdventureWorks.Business.Entities
{

    // Customer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public partial class Sales_CustomerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_Customer>
    {
        public Sales_CustomerConfiguration()
            : this("Sales")
        {
        }

        public Sales_CustomerConfiguration(string schema)
        {
            ToTable("Customer", schema);
            HasKey(x => x.CustomerId);

            Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PersonId).HasColumnName(@"PersonID").HasColumnType("int").IsOptional();
            Property(x => x.StoreId).HasColumnName(@"StoreID").HasColumnType("int").IsOptional();
            Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").HasColumnType("int").IsOptional();
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(10).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.Person_Person).WithMany(b => b.Sales_Customers).HasForeignKey(c => c.PersonId).WillCascadeOnDelete(false); // FK_Customer_Person_PersonID
            HasOptional(a => a.Sales_SalesTerritory).WithMany(b => b.Sales_Customers).HasForeignKey(c => c.TerritoryId).WillCascadeOnDelete(false); // FK_Customer_SalesTerritory_TerritoryID
            HasOptional(a => a.Sales_Store).WithMany(b => b.Sales_Customers).HasForeignKey(c => c.StoreId).WillCascadeOnDelete(false); // FK_Customer_Store_StoreID
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
