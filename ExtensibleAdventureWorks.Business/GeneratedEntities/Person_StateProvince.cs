// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace ExtensibleAdventureWorks.Business.Entities
{

    // StateProvince
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public partial class Person_StateProvince
    {

        ///<summary>
        /// Primary key for StateProvince records.
        ///</summary>
        public int StateProvinceId { get; set; } // StateProvinceID (Primary key)

        ///<summary>
        /// ISO standard state or province code.
        ///</summary>
        public string StateProvinceCode { get; set; } // StateProvinceCode (length: 3)

        ///<summary>
        /// ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        public string CountryRegionCode { get; set; } // CountryRegionCode (length: 3)

        ///<summary>
        /// 0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.
        ///</summary>
        public bool IsOnlyStateProvinceFlag { get; set; } = true; // IsOnlyStateProvinceFlag

        ///<summary>
        /// State or province description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        public int TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } = System.Guid.NewGuid(); // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } = System.DateTime.Now; // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Person_Addresses where [Address].[StateProvinceID] point to this entity (FK_Address_StateProvince_StateProvinceID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_Address> Person_Addresses { get; set; } = new System.Collections.Generic.List<Person_Address>(); // Address.FK_Address_StateProvince_StateProvinceID
        /// <summary>
        /// Child Sales_SalesTaxRates where [SalesTaxRate].[StateProvinceID] point to this entity (FK_SalesTaxRate_StateProvince_StateProvinceID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesTaxRate> Sales_SalesTaxRates { get; set; } = new System.Collections.Generic.List<Sales_SalesTaxRate>(); // SalesTaxRate.FK_SalesTaxRate_StateProvince_StateProvinceID

        // Foreign keys

        /// <summary>
        /// Parent Person_CountryRegion pointed by [StateProvince].([CountryRegionCode]) (FK_StateProvince_CountryRegion_CountryRegionCode)
        /// </summary>
        public virtual Person_CountryRegion Person_CountryRegion { get; set; } // FK_StateProvince_CountryRegion_CountryRegionCode
        /// <summary>
        /// Parent Sales_SalesTerritory pointed by [StateProvince].([TerritoryId]) (FK_StateProvince_SalesTerritory_TerritoryID)
        /// </summary>
        public virtual Sales_SalesTerritory Sales_SalesTerritory { get; set; } // FK_StateProvince_SalesTerritory_TerritoryID
    }

}
// </auto-generated>
